from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, User, Message
from telegram.ext import CallbackContext
import time
import traceback
import sys
from os import remove as rem_file, path
import bot_utils
from bot_utils import validate_text, is_user_specified, convert_to_voice, MAX_CHARS_NUM
from tortoise_api import gen_tortoise, RESULTS_PATH


async def start_cmd(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    bot_utils.logger.debug(f"started by user: {user.full_name} with id: {user.id}")
    if not is_user_specified() or user.id == bot_utils.USER_ID:
        greet_msg = f"Hi, {user.mention_html()}!"
    else:
        greet_msg = f"Sorry, {user.mention_html()}, it's a private bot"
    await update.message.reply_html(greet_msg)


async def gen_audio_cmd(update: Update, context: CallbackContext) -> None:
    """Send voice audio file generated by inference"""
    user = update.effective_user
    bot_utils.logger.info(f"Audio generation called by {user.full_name}, with id: {user.id}, with query: {update.message.text}")
    reply_id = update.message.message_id
    if user.id != bot_utils.USER_ID and is_user_specified():
        await update.message.reply_html(f"Sorry, {user.mention_html()}, it's a private bot",
                                  reply_to_message_id=reply_id)
        return

    if not context.args:
        await update.message.reply_text("Error: No text provided)", reply_to_message_id=reply_id)
        return
    try:
        text = ' '.join(context.args[1:])
        voice = context.args[0]
        if not validate_text(text):
            await update.message.reply_text(f"Invalid symbols detected or exceeded max text length: {MAX_CHARS_NUM}",
                                      reply_to_message_id=reply_id)
            return

        await gen_audio_impl(text, user, update.message, gen_tortoise, voice)
    except BaseException:
        await update.message.reply_html("Internal Error", reply_to_message_id=reply_id)


async def gen_audio_impl(text: str, user: User, message: Message, syntesize, speaker_id: str = "freeman") -> None:
    filename = path.abspath(path.join(RESULTS_PATH, '{}_{}.wav'.format(user.id, int(time.time()))))
    try:
        syntesize(filename, text, speaker_id)
    except BaseException:
        bot_utils.logger.info(f"Audio generation FAILED: called by {user.full_name} with query: {text}")
        traceback.print_exc(file=sys.stdout)
    else:
        voice_file = convert_to_voice(filename)
        try:
            with open(voice_file, 'rb') as audio:
                keyboard = [[InlineKeyboardButton("Regenerate", callback_data=speaker_id)]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await message.reply_voice(voice=audio, caption=text, reply_to_message_id=message.message_id, reply_markup=reply_markup)
        except BaseException:
            message.reply_html("Internal Error", reply_to_message_id=message.message_id)
            bot_utils.logger.info(f"Audio generation FAILED SEND FILE: called by {user.full_name} with query: {text}")
        else:
            bot_utils.logger.info(f"Audio generation DONE: called by {user.full_name} with query: {text}")
        finally:
            rem_file(voice_file)
    finally:
        rem_file(filename)


async def help_cmd(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    bot_utils.logger.debug(f"user: {user.full_name} with id: {user.id} asked for help")
    await update.message.reply_text("No help here, yet")


async def retry_button(update: Update, context: CallbackContext) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query
    user = update.effective_user
    if user.id != bot_utils.USER_ID and is_user_specified():
        return

    query.answer()
    bot_utils.logger.info(f"Retry called by {user.full_name}, with id: {user.id}, with query: {query.message.caption}")
    await gen_audio_impl(query.message.caption, user, query.message, gen_tortoise, query.data)
